// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id    Int     @id @default(autoincrement())
  name  String
  price Float
  type  String

  @@map("p")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  email       String    @unique
  password    String
  token       String?
  tokenExpiry DateTime?
  habits      Habit[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Habit {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  goal        String?
  frequency   String        // daily, weekly, etc.
  progressPercent Int      @default(0)
  streak      Int          @default(0)
  startDate   DateTime     @default(now())
  userId      Int
  user        User          @relation(fields: [userId], references: [id])
  categoryId  Int?
  category    Category?    @relation(fields: [categoryId], references: [id])
  completions Completion[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?  // Hex color code
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habits    Habit[]
}

model Completion {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  habitId   Int
  habit     Habit    @relation(fields: [habitId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 
